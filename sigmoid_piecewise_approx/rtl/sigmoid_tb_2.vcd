$date
	Sat Nov 23 17:35:59 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_sigmoid_2 $end
$var wire 16 ! gradient [15:0] $end
$var wire 16 " offset [15:0] $end
$var wire 16 # alfa [15:0] $end
$var parameter 32 $ BITS $end
$var reg 16 % x [15:0] $end
$scope module uut $end
$var wire 16 & x [15:0] $end
$var wire 16 ' offset [15:0] $end
$var wire 16 ( not_in [15:0] $end
$var wire 16 ) mult_result [15:0] $end
$var wire 16 * gradient [15:0] $end
$var wire 16 + alfa [15:0] $end
$var wire 16 , abs [15:0] $end
$var parameter 32 - BITS $end
$scope module gradient_0 $end
$var wire 16 . input_grad [15:0] $end
$var wire 1 / overflow $end
$var wire 4 0 pre_overflow [3:0] $end
$var wire 11 1 temp_2s [10:0] $end
$var wire 4 2 select [3:0] $end
$var wire 11 3 not_in [10:0] $end
$var reg 16 4 out_grad [15:0] $end
$var reg 16 5 out_offset [15:0] $end
$var reg 16 6 temp_offset [15:0] $end
$var reg 16 7 temp_offset_2 [15:0] $end
$upscope $end
$scope module mult_inst $end
$var wire 16 8 Operand_1 [15:0] $end
$var wire 16 9 Operand_2 [15:0] $end
$var wire 32 : temp_op2 [31:0] $end
$var wire 32 ; temp_op1 [31:0] $end
$var wire 64 < temp [63:0] $end
$var wire 16 = result [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 -
b10000 $
$end
#0
$dumpvars
b0 =
b0 <
b0 ;
b111011 :
b111011 9
b0 8
b10000000 7
b10000000 6
b10000000 5
b111011 4
b0 3
b0 2
b0 1
b0 0
0/
b0 .
b0 ,
b10000000 +
b111011 *
b0 )
b0 (
b10000000 '
b0 &
b0 %
b10000000 #
bz "
bz !
$end
#10000
b10010000 '
b10010000 5
b10010000 7
b10010000 6
b100110 :
b100110 *
b100110 4
b100110 9
b1 2
b100000000 1
b100000000 3
b10110110 #
b10110110 +
b100110 )
b100110 =
b100000000 ,
b100000000 (
b10011000000000 <
b100000000 ;
b100000000 %
b100000000 &
b100000000 .
b100000000 8
#20000
b10111101 '
b10111101 5
b10111101 7
b10111101 6
b10010 :
b10010 *
b10010 4
b10010 9
b10 2
b1000000000 1
b1000000000 3
b11100001 #
b11100001 +
b100100 )
b100100 =
b1000000000 ,
b1000000000 (
b10010000000000 <
b1000000000 ;
b1000000000 %
b1000000000 &
b1000000000 .
b1000000000 8
#30000
b11011101 '
b11011101 5
b11011101 7
b11011101 6
b1000 :
b1000 *
b1000 4
b1000 9
b11 2
b1100000000 1
b1100000000 3
b11110101 #
b11110101 +
b11000 )
b11000 =
b1100000000 ,
b1100000000 (
b1100000000000 <
b1100000000 ;
b1100000000 %
b1100000000 &
b1100000000 .
b1100000000 8
#40000
b11110000 '
b11110000 5
b11110000 7
b11110000 6
b11 :
b11 *
b11 4
b11 9
b100 2
b10000000000 1
b10000000000 3
b11111100 #
b11111100 +
b1100 )
b1100 =
b10000000000 ,
b10000000000 (
b110000000000 <
b10000000000 ;
b10000000000 %
b10000000000 &
b10000000000 .
b10000000000 8
#50000
b11111001 '
b11111001 5
b11111001 7
b11111001 6
b1 :
b1 *
b1 4
b1 9
b101 2
b10100000000 1
b10100000000 3
b11111110 #
b11111110 +
b101 )
b101 =
b10100000000 ,
b10100000000 (
b10100000000 <
b10100000000 ;
b10100000000 %
b10100000000 &
b10100000000 .
b10100000000 8
#60000
b10010000 6
b100110 :
b100110 *
b100110 4
b100110 9
b1 2
b11111111 3
b1111111111011010 )
b1111111111011010 =
b11111111 (
b100000000 ,
b1001010 #
b1001010 +
b1110000 '
b1110000 5
b1111111101101111 7
b100000000 1
b10010111111111111111111101101000000000 <
b11111111111111111111111100000000 ;
b1111111100000000 %
b1111111100000000 &
b1111111100000000 .
b1111111100000000 8
#70000
b1000011 '
b1000011 5
b1111111101000010 7
b10111101 6
b10010 :
b10010 *
b10010 4
b10010 9
b10 2
b1000000000 1
b111111111 3
b1000000000 ,
b111111111 (
b11111 #
b11111 +
b1111111111011100 )
b1111111111011100 =
b1000111111111111111111101110000000000 <
b11111111111111111111111000000000 ;
b1111111000000000 %
b1111111000000000 &
b1111111000000000 .
b1111111000000000 8
#80000
b100011 '
b100011 5
b1111111100100010 7
b11011101 6
b1000 :
b1000 *
b1000 4
b1000 9
b11 2
b1100000000 1
b1011111111 3
b1100000000 ,
b1011111111 (
b1011 #
b1011 +
b1111111111101000 )
b1111111111101000 =
b11111111111111111111110100000000000 <
b11111111111111111111110100000000 ;
b1111110100000000 %
b1111110100000000 &
b1111110100000000 .
b1111110100000000 8
#90000
b10000 '
b10000 5
b1111111100001111 7
b11110000 6
b11 :
b11 *
b11 4
b11 9
b100 2
b10000000000 1
b1111111111 3
b10000000000 ,
b1111111111 (
b100 #
b100 +
b1111111111110100 )
b1111111111110100 =
b1011111111111111111111010000000000 <
b11111111111111111111110000000000 ;
b1111110000000000 %
b1111110000000000 &
b1111110000000000 .
b1111110000000000 8
#100000
b111 '
b111 5
b1111111100000110 7
b11111001 6
b1 :
b1 *
b1 4
b1 9
b101 2
b10100000000 1
b10011111111 3
b10100000000 ,
b10011111111 (
b10 #
b10 +
b1111111111111011 )
b1111111111111011 =
b11111111111111111111101100000000 <
b11111111111111111111101100000000 ;
b1111101100000000 %
b1111101100000000 &
b1111101100000000 .
b1111101100000000 8
#110000
